openapi: 3.0.3
info:
  title: Student Housing Listing API
  version: 1.0.0
  description: API for creating, searching, updating, and managing housing listings.

servers:
  - url: https://api.example.com
    description: Production
  - url: http://localhost:8000
    description: Local

tags:
  - name: Listings
    description: CRUD and search for listings
  - name: Media
    description: Image uploads

paths:
  /listing:
    post:
      tags: [Listings]
      summary: Create the housing
      operationId: createListing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListingCreate'
            examples:
              sample:
                value:
                  address: "123 College Ave, New York, NY"
                  distanceFromCampusKm: 1.2
                  publicTransportation: ["Subway 1", "Bus M4"]
                  pricePerMonth: 1500
                  availableFrom: "2025-11-01"
                  availableTo: "2026-05-31"
                  roomType: "STUDIO"
                  genderNeutral: true
                  utilitiesIncluded: true
                  acHeaterIncluded: true
                  furnished: true
                  petAllowed: false
                  kitchen: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        '400':
          $ref: '#/components/responses/BadRequest'
    get:
      tags: [Listings]
      summary: Search with filter
      operationId: searchListings
      parameters:
        - in: query
          name: address
          schema: { type: string }
          description: Full or partial address match
        - in: query
          name: minDistanceKm
          schema: { type: number, format: float, minimum: 0 }
          description: Minimum distance from campus (km)
        - in: query
          name: maxDistanceKm
          schema: { type: number, format: float, minimum: 0 }
          description: Maximum distance from campus (km)
        - in: query
          name: publicTransportation
          schema:
            type: array
            items: { type: string }
          style: form
          explode: true
          description: One or more transit options (e.g., Subway A, Bus M5)
        - in: query
          name: minPrice
          schema: { type: number, format: float, minimum: 0 }
        - in: query
          name: maxPrice
          schema: { type: number, format: float, minimum: 0 }
        - in: query
          name: availableFrom
          schema: { type: string, format: date }
          description: Desired start date (YYYY-MM-DD)
        - in: query
          name: availableTo
          schema: { type: string, format: date }
          description: Desired end date (YYYY-MM-DD)
        - in: query
          name: roomType
          schema:
            $ref: '#/components/schemas/RoomType'
        - in: query
          name: genderNeutral
          schema: { type: boolean }
        - in: query
          name: utilitiesIncluded
          schema: { type: boolean }
        - in: query
          name: acHeaterIncluded
          schema: { type: boolean }
        - in: query
          name: furnished
          schema: { type: boolean }
        - in: query
          name: petAllowed
          schema: { type: boolean }
        - in: query
          name: kitchen
          schema: { type: boolean }
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
        - in: query
          name: sort
          schema:
            type: string
            enum: [pricePerMonth, -pricePerMonth, distanceFromCampusKm, -distanceFromCampusKm, availableFrom, -availableFrom]
            default: pricePerMonth
          description: Use a leading '-' for descending
      responses:
        '200':
          description: Results
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  page:
                    type: integer
                  pageSize:
                    type: integer
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Listing'
              examples:
                sample:
                  value:
                    total: 1
                    page: 1
                    pageSize: 20
                    items:
                      - id: 42
                        address: "123 College Ave, New York, NY"
                        distanceFromCampusKm: 1.2
                        publicTransportation: ["Subway A", "Bus M5"]
                        pricePerMonth: 1500
                        availableFrom: "2025-11-01"
                        availableTo: "2026-05-31"
                        roomType: "STUDIO"
                        genderNeutral: true
                        utilitiesIncluded: true
                        acHeaterIncluded: true
                        furnished: true
                        petAllowed: false
                        kitchen: true

  /listing/{id}:
    get:
      tags: [Listings]
      summary: Search the housing by id
      operationId: getListingById
      parameters:
        - $ref: '#/components/parameters/ListingId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Listings]
      summary: Update the housing
      operationId: updateListing
      parameters:
        - $ref: '#/components/parameters/ListingId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListingUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Listings]
      summary: Delete the housing
      operationId: deleteListing
      parameters:
        - $ref: '#/components/parameters/ListingId'
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
              examples:
                ok:
                  value: { message: "Listing deleted." }
        '404':
          $ref: '#/components/responses/NotFound'

  /listing/{id}/images:
    post:
      tags: [Media]
      summary: Upload images
      operationId: uploadListingImages
      parameters:
        - $ref: '#/components/parameters/ListingId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [files]
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: One or more image files
      responses:
        '200':
          description: Uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploaded:
                    type: array
                    items:
                      type: string
                      description: Public URL or storage key of the uploaded image
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /listing/{id}/a:
    patch:
      tags: [Listings]
      summary: Update availability
      operationId: patchAvailability
      description: Update the availability window for a listing.
      parameters:
        - $ref: '#/components/parameters/ListingId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvailabilityPatch'
            examples:
              window:
                value:
                  availableFrom: "2025-12-01"
                  availableTo: "2026-05-31"
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  parameters:
    ListingId:
      name: id
      in: path
      required: true
      schema: { type: integer, minimum: 1 }
      description: Listing ID

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    RoomType:
      type: string
      enum: [STUDIO, PRIVATE_ROOM, SHARED_ROOM, APARTMENT, OTHER]

    ListingBase:
      type: object
      properties:
        address:
          type: string
        distanceFromCampusKm:
          type: number
          format: float
          minimum: 0
        publicTransportation:
          type: array
          items: { type: string }
          description: Transit options near the listing
        pricePerMonth:
          type: number
          format: float
          minimum: 0
        availableFrom:
          type: string
          format: date
        availableTo:
          type: string
          format: date
        roomType:
          $ref: '#/components/schemas/RoomType'
        genderNeutral:
          type: boolean
          description: Whether the listing is gender-neutral
        utilitiesIncluded:
          type: boolean
        acHeaterIncluded:
          type: boolean
        furnished:
          type: boolean
        petAllowed:
          type: boolean
        kitchen:
          type: boolean

    ListingCreate:
      allOf:
        - $ref: '#/components/schemas/ListingBase'
        - type: object
          required:
            - address
            - pricePerMonth
            - roomType
            - availableFrom
          properties: {}

    ListingUpdate:
      allOf:
        - $ref: '#/components/schemas/ListingBase'

    Listing:
      allOf:
        - $ref: '#/components/schemas/ListingBase'
        - type: object
          properties:
            id:
              type: integer
              example: 42
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            imageUrls:
              type: array
              items: { type: string, format: uri }

    AvailabilityPatch:
      type: object
      properties:
        availableFrom:
          type: string
          format: date
        availableTo:
          type: string
          format: date
      description: Provide at least one field to update.
      minProperties: 1

    Error:
      type: object
      properties:
        error:
          type: string
        details:
          type: object
          additionalProperties: true
